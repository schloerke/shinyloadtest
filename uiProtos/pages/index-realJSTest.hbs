---
layout: shiny-layout
title: ShinyLoadTest UI Prototype
sessionsButtons: 
- {button: '4 workers', data: 'four-worker-chart'}
- {button: '16 workers', data: 'sixteen-worker-chart'}
durationFilters:
- {button: 'Slowest min times', data: 'slowest-min'}
- {button: 'Slowest max times', data: 'slowest-max'}
- {button: 'Largest mean differences', data: 'largest-mean'}
- {button: 'Data table', data: 'data-table'}
sltSideMenu:
- {href: '#sessions' ,icon: 'server', menuItem: 'Sessions'}
- {href: '#sessions' ,icon: 'clock', menuItem: 'Time'}
- {href: '#duration' ,icon: 'future', menuItem: 'Event Duration'}
- {href: '#duration' ,icon: 'git-fork', menuItem: 'Event Concurrency'}
---
<style>
  .slt-visible-chart {
    display: block !important;
  }

  #chart-grid-page .slt-chart-grid > div {
    display: none;
  }
</style>

  <div class="sui-flex-5 sui-layout-flex-horz sui-full-height">
    <div class="sui-flex-1 uk-background-muted slt-side-menu-container">
      {{> sui_sidebarNav logo="Shiny:loadtest" menu=sltSideMenu }}
    </div>
    <div class="sui-flex-4 slt-main-content">
      {{!-- sessions section --}}
      <section class="sui-layout-flex-vert" id="sessions">
        <div class="sui-flex-0 slt-view-control">
          {{> sui_segmentedButton id="sessions-report-controller" buttons=sessionsButtons}}
        </div>
        <div class="sui-flex-5" id="session-chart-view">
          <div id="four-worker-chart">
            <div class="uk-padding uk-padding-remove-bottom">
              <p class="uk-text-meta">Below is the results of four sessions versus the baseline single session. Note that narrower bars mean better performance.</p>
            </div>
            <img src="SVG/4workerbaseline.svg"/>
          </div>
          <div id="sixteen-worker-chart">
            <div class="uk-padding uk-padding-remove-bottom">
              <p class="uk-text-meta">Below is the results of sixteen sessions versus the baseline single session. Note that narrower bars mean better performance.</p>
            </div>
            <img src="SVG/16workerbaseline.svg"/>
          </div>
        </div>
      </section>
      {{!-- event durration section --}}
      <section class="sui-layout-flex-vert" id="duration">
        <div class="sui-flex-0 slt-view-control">
            {{> sui_segmentedButton id="duration-filters" buttons=durationFilters}}
        </div>
        <div class="sui-flex-5" id="duration-chart-view">
          <div id="chart-grid-page">
            <div class="slt-box-picker-container">
              <input id="box-plot-picker" type="number" value="5" min="1" max="7" />
              <h3>slowest minimum times</h3>
            </div>
            <div class="uk-flex uk-grid-match uk-grid-small uk-child-width-1-4@m slt-chart-grid" uk-grid>
                <div class="">
                  <div class="uk-card uk-card-small slt-chart-grid-chart">
                    <img src="SVG/boxplot.svg" style="width:100%;" /></div>
                </div>
                <div class="">
                  <div class="uk-card uk-card-small slt-chart-grid-chart">
                    <img src="SVG/boxplot.svg" style="width:100%;" /></div>
                </div>
                <div class="">
                  <div class="uk-card uk-card-small slt-chart-grid-chart">
                    <img src="SVG/boxplot.svg" style="width:100%;" /></div>
                </div>
                <div class="">
                  <div class="uk-card uk-card-small slt-chart-grid-chart">
                    <img src="SVG/boxplot.svg" style="width:100%;" /></div>
                </div>
                <div class="">
                  <div class="uk-card uk-card-small slt-chart-grid-chart">
                    <img src="SVG/boxplot.svg" style="width:100%;" /></div>
                </div>
                <div class="">
                  <div class="uk-card uk-card-small slt-chart-grid-chart">
                    <img src="SVG/boxplot.svg" style="width:100%;" /></div>
                </div>
                <div class="">
                  <div class="uk-card uk-card-small slt-chart-grid-chart">
                    <img src="SVG/boxplot.svg" style="width:100%;" /></div>
                </div>
            </div>
          </div>
          <div id="data-table" style="padding: 0 2rem;">
            <table class="uk-table uk-table-hover uk-table-striped slt-data-table">
              <thead>
                <tr>
                  <th>Label</th>
                  <th>Min time</th>
                  <th>Max time</th>
                  <th>Mean Difference</th>
                </tr>
              </thead>
              <tbody>
                {{!-- this gets populated automatically via JS --}}
              </tbody>
            </table>
          </div>
        </div>
      </section>
    </div>
  </div>
<script src="js/nouislider.min.js"></script>
<script src="js/sui.js"></script>
<script>
  
  suiSegmentedButtons();
  suiSideNavBar();
  managedChartGrid(document.querySelector('#box-plot-picker'), document.querySelector('.slt-chart-grid'));
  

  // app specific handler for changing the number of box plots to show
  {{!-- const picker = document.querySelector('#box-plot-picker'); --}}
  // this is so ugly but it's quick and this is just a prototype, but still :**(
  const boxPlotTemplate = `<div class=""><div class="uk-card uk-card-small slt-chart-grid-chart">
<img src="SVG/boxplot.svg" style="width:100%;"/></div></div>`;
  
  // this is the script that needs to run in the actual app to manage the generated SVGs
  function managedChartGrid(picker, activeGrid) {
    let charts = []; 
    for( node of activeGrid.children){
      charts.push(node);
    }
    const updateChartGrid = () => {
      // Check to make sure we aren't outside the bounds of the chart set
      if (picker.value > picker.max) picker.value = picker.max;
      else if (picker.value < picker.min) picker.value = picker.min;

      const visibleCharts = activeGrid.querySelectorAll('.slt-visible-chart').length;
      if (picker.value > visibleCharts) {
        for (let i = visibleCharts; i < picker.value; i++) {
          charts[i].classList.add('slt-visible-chart');
        }
      }
      else if (picker.value < visibleCharts) {
        for (let i = visibleCharts - 1; i >= picker.value; i--) {
          charts[i].classList.remove('slt-visible-chart');
        }
      }
    };
    picker.addEventListener('input', updateChartGrid);
    // this sets the initial state of the DOM
    updateChartGrid();
  }
  
    
  // random int generator helper
  const randInt = (min, max) => {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min +1)) + min;
  };

  // generate a data table because no one wants to write a realistic length one by hand
  const tableBody = document.querySelector('#data-table table tbody');
  for (let i = 0; i < 50; i++){
    let label = 'REQ_HOME';
    if( i > 0) {
      switch(randInt(1,4)){
        case 1: 
          label = 'WS_RECV';
          break;
        case 2: 
          label = 'WS_OPEN';
          break;
        case 3:
          label = 'REQ_GET';
          break;
        case 4:
          label = 'WS_RECV_INIT'
          break;
      }
    }
      let minTime = Math.random().toFixed(3);
      let maxTime = Math.random().toFixed(3) + randInt(0,20);
      let meanDiff =  Math.random().toFixed(3) + randInt(0, 7);
      const tableRowTemplate = `<tr><td>${i+1}:${label}</td><td>${minTime}</td>
<td>${maxTime}</td><td>${meanDiff}</td></tr>`;
      tableBody.insertAdjacentHTML('beforeend', tableRowTemplate);
  }
  
  // core logic to change views with a segmented button control
  const switchSegmentViews = (viewsContainer, selectedView) => {
    for(let view of viewsContainer){
      view.style.display = 'none';
    }
    document.querySelector(`#${selectedView}`).style.display = 'block';
  };

  // app specific click handler for #sessions segmented control
  const sessionsControllerSegments = document.querySelector('#sessions-report-controller').children;
  const sessionsCharts = document.querySelector('#session-chart-view').children;
  for (let segment of sessionsControllerSegments){
    segment.addEventListener('click', () => {
      switchSegmentViews(sessionsCharts, segment.dataset.viewOption);
    });
  }

  //app specific click handler for #duration segmented control
  const durationSelectorSegments = document.querySelector('#duration-filters').children;
  const durationCharts = document.querySelector('#duration-chart-view').children;
  for(let segment of durationSelectorSegments){
    // this is kinda hackey, but it's the only way to deal with not having a page for each button
    let target = segment.dataset.viewOption === 'data-table' ? 'data-table' : 'chart-grid-page';
    segment.addEventListener('click', () => {
      switchSegmentViews(durationCharts, target);
    });
  }

  // app specific handler to side menu
  const testSelector = document.querySelector('.sui-nav-sidebar');
  for(let item of testSelector.children){
    let link = item.children[0];
    if(link.href){
      link.addEventListener('click', () => {
        let newActivePage = document.querySelector(`#${link.href.split('#')[1]}`);
        for(let section of document.querySelectorAll('section')){
          section.style.display = 'none';
        }
        newActivePage.style.display = 'block';

      });
    }
  }
</script>